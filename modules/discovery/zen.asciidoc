[[modules-discovery-zen]]
=== Zen 发现

Zen发现是elasticsearch内置的默认发现模块。 它提供了单播发现，但可以扩展以支持云环境和其他
形式的发现。

Zen与其他模块结合在一起使用，比如，所有节点间通信是通过 <<modules-transport,transport>>
模块完成的。

它被分成几个子模块，分别在下面解释：

[float]
[[ping]]
==== Ping

这是一个节点在发现机制中用来发现其他节点的过程。

[float]
[[unicast]]
===== 单播

单播发现需要一组主机名来作为 gossip 路由， 提供了如下以 `discovery.zen.ping.unicast`为
前缀的配置。

[cols="<,<",options="header",]
|=======================================================================
|配置 |描述
|`hosts` |支持一个数组或者逗号分隔的字符串。每个值是如 `host:port` 的形式, 或者
`host:port1-port2`的形式。注意如果是IPv6的主机，需要用中括号包起来。
默认为 `127.0.0.1, [::1]`
|=======================================================================

单播发现使用 <<modules-transport,transport>> 模块来执行发现过程。

[float]
[[master-election]]
==== 主节点选举

ping这个操作作为主节点中的一部分，要么是在主节点选举或者有节点加入时需要用到，这是自动完成的。
`discovery.zen.ping_timeout`（默认为 `3s`） 允许适当调节选举时间以应对网络慢或者拥塞（该值
越高，选举主节点失败几率就越小）。 当节点加入时，节点会发送一个加入请求给主节点，并带有超时时间
( `discovery.zen.join_timeout`)， 并在超时发送后重试20次。

当主节点停止工作或者遇到问题后，集群中得节点会开始互相ping，并选举一个新的主节点。这个ping的过程
还可以作为一种保护机制，以防止因为网络故障导致该节点错误认为是主节点发生故障。这种情况下，该节点
会接收到其他节点返回的当前主节点的消息。

如果 `discovery.zen.master_election.filter_client` 设置为 `true`, 客户端节点的ping的结果
将会咋主节点选举时被忽略。 如果 `discovery.zen.master_election.filter_data` 是 `true`，
非可成为主节点的数据节点上的ping的结果会被忽略，默认为 `false`。在主节点选举时， 主节点候选节点中得ping
结果总会被处理。

如果将 `node.master`设置为 `false`,则该节点不会被选为主节点。 注意，如果一个节点时客户端节点
（ `node.client` 为 `true`），该节点不会被选为主节点（ `node.master`被自动设置为 `false`)。

The `discovery.zen.minimum_master_nodes` sets the minimum
number of master eligible nodes that need to join a newly elected master in order for an election to
complete and for the elected node to accept it's mastership. The same setting controls the minimum number of
active master eligible nodes that should be a part of any active cluster. If this requirement is not met the
active master node will step down and a new mastser election will be begin.

This setting must be set to a quorum of your master eligible nodes. It is recommended to avoid
having only two master eligible nodes, since a quorum of two is two. Therefore, a loss
of either master node will result in an inoperable cluster.

[float]
[[fault-detection]]
==== Fault Detection

There are two fault detection processes running. The first is by the
master, to ping all the other nodes in the cluster and verify that they
are alive. And on the other end, each node pings to master to verify if
its still alive or an election process needs to be initiated.

The following settings control the fault detection process using the
`discovery.zen.fd` prefix:

[cols="<,<",options="header",]
|=======================================================================
|Setting |Description
|`ping_interval` |How often a node gets pinged. Defaults to `1s`.

|`ping_timeout` |How long to wait for a ping response, defaults to
`30s`.

|`ping_retries` |How many ping failures / timeouts cause a node to be
considered failed. Defaults to `3`.
|=======================================================================

[float]
==== Cluster state updates

The master node is the only node in a cluster that can make changes to the
cluster state. The master node processes one cluster state update at a time,
applies the required changes and publishes the updated cluster state to all
the other nodes in the cluster. Each node receives the publish message,
updates its own cluster state and replies to the master node, which waits for
all nodes to respond, up to a timeout, before going ahead processing the next
updates in the queue. The `discovery.zen.publish_timeout` is set by default
to 30 seconds and can be changed dynamically through the
<<cluster-update-settings,cluster update settings api>>

[float]
[[no-master-block]]
==== No master block

For the cluster to be fully operational, it must have an active master and the
number of running master eligible nodes must satisfy the
`discovery.zen.minimum_master_nodes` setting if set. The
`discovery.zen.no_master_block` settings controls what operations should be
rejected when there is no active master.

The `discovery.zen.no_master_block` setting has two valid options:

[horizontal]
`all`:: All operations on the node--i.e. both read & writes--will be rejected. This also applies for api cluster state
read or write operations, like the get index settings, put mapping and cluster state api.
`write`:: (default) Write operations will be rejected. Read operations will succeed, based on the last known cluster configuration.
This may result in partial reads of stale data as this node may be isolated from the rest of the cluster.

The `discovery.zen.no_master_block` setting doesn't apply to nodes based apis (for example cluster stats, node info and
node stats apis) which will not be blocked and try to execute on any node possible.
