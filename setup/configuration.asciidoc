[[setup-configuration]]
== 配置

[float]
=== 环境变量

Elasticsearch 启动脚本中有内置的传递给 JVM 的 `JAVA_OPTS`. 最重要的设置就是用于控制进程最大允许内存的 `-Xmx` 以及用于控制
进程最小允许内存的 `-Xms` (_通常给进程分配的内存越多越好_).

大多数时候最好使用默认的 `JAVA_OPTS` 设置, 如果想要设置或改变 JVM的配置或参数可以使用 `ES_JAVA_OPTS` 环境变量.

`ES_HEAP_SIZE` 环境变量可以设置分配给 elasticsearch Java进程的堆内存大小. 它会给最小和最大值分配相同的值,
尽管可以通过设置 `ES_MIN_MEM` (默认值是 `256m`) 和 `ES_MAX_MEM` (默认值是 `1g`) 这两个环境变量来显示地设置 (不建议) 它们的值.

建议将最小和最大内存设置成相同的值并开启<<setup-configuration-memory,`mlockall`>>.

[float]
[[system]]
=== 系统配置

[float]
[[file-descriptors]]
==== 文件描述符

确保在机器上增加打开的文件描述符的数量 (或者为了运行 elasticsearch 的用户). 推荐将其设置为 32k 甚至是 64k .

为了测试进程最多可以打开多少个文件, 将 `-Des.max-open-files` 设置为 `true`, 这样在启动的时候会打印
出进程可以打开的文件数量.

或者, 你可以使用 <<cluster-nodes-info, Nodes Info>> API 来为每个节点检索 `max_file_descriptors` , 如下:

[source,js]
--------------------------------------------------
curl localhost:9200/_nodes/process?pretty
--------------------------------------------------

[float]
[[vm-max-map-count]]
==== 虚拟内存

Elasticsearch 默认使用 <<default_fs,`hybrid mmapfs / niofs`>> 目录来存储它的索引. 操作系统对于
mmap数量的默认限制有可能会非常小, 这样会导致内存溢出异常. 在 Linux 系统中, 你可以通过以 `root` 用户运行下面的命令来增加这个限制:

[source,sh]
-------------------------------------
sysctl -w vm.max_map_count=262144
-------------------------------------

想要永久地设置这个值, 可以更新 `/etc/sysctl.conf` 中的 `vm.max_map_count` 设置.

NOTE: 如果安装 Elasticsearch 你使用的是一个 .deb 或 .rpm 包, 这个设置将会自动的改变. 可以运行 `sysctl vm.max_map_count` 来验证这一点.

[float]
[[setup-configuration-memory]]
==== 内存设置

大多数操作系统都会试图为文件系统缓存使用尽可能多的内存并且急切地将未使用的应用程序内存交换出来, 这样很可能会导致 elasticsearch 进程被交换. 交换是非常影响性能和节点稳定性的, 所以应该不惜一切代价来避免它.

下面有三种解决方案:

* **禁用交换**
+
--

最简单的方案就是完全禁用交换. 通常 Elasticsearch 是机器上运行的唯一服务, 并且它的内存使用是由 `ES_HEAP_SIZE` 环境变量控制的.  所以应该不需要启用交换.

在 Linux 系统上, 你可以通过运行 `sudo swapoff -a` 来临时地禁用交换. 想要永久禁用它, 你需要编辑 `/etc/fstab` 文件并注释掉所有包含单词 `swap` 的行.

在 Windows 系统上, 通过 `System Properties → Advanced → Performance → Advanced → Virtual memory` 完全禁用页面文件可以实现同样的效果.

--

* **配置 `swappiness`**
+
--
第二种方案就是确保 sysctl 值 `vm.swappiness` 被设置成 `0`. 这将会减少内核进行交换的趋势并且不会导致正常情况下也进行交换, 但是在紧急情况下仍然允许
整个操作系统进行交换.

NOTE: 从内核 3.5-rc1 及以上版本之后, `swappiness` 为 `0` 会导致OOM 杀手杀死这个进程而不是允许交换.
在紧急情况下如果仍然允许交换你需要将 `swappiness` 设置成 `1`.
--

* **`mlockall`**
+
--
第三种方案是在 Linux/Unix 系统上使用 http://opengroup.org/onlinepubs/007908799/xsh/mlockall.html[mlockall] 或者在 Windows 系统上使用 https://msdn.microsoft.com/en-us/library/windows/desktop/aa366895%28v=vs.85%29.aspx[VirtualLock]
来尝试将进程地址空间锁定在 RAM 中, 以阻止任何 Elasticsearch 内存被交换出去. 这可以通过在 `config/elasticsearch.yml` 文件增加下面这行来实现:

[source,yaml]
--------------
bootstrap.mlockall: true
--------------

Elasticsearch 启动之后, 你可以通过检查下面这个请求的输出结果中 `mlockall` 的值来判断上面的设置是否生效:

[source,sh]
--------------
curl http://localhost:9200/_nodes/process?pretty
--------------

如果你看到 `mlockall` 的值是 `false`, 表示 `mlockall` 请求失败. 在 Linux/Unix 系统上最有可能失败的原因是运行 Elasticsearch 的用户
没有锁定内存的权限. 在启动 Elasticsearch 之前可以通过 `root` 身份运行 `ulimit -l unlimited` 来赋权.

另一个 `mlockall` 请求失败的可能原因是临时目录 (通常是 `/tmp`) 使用了 `noexec` 选项来挂载. 这可以通过在启动 Elasticsearch 时指定一个新的临时目录来解决:

[source,sh]
--------------
./bin/elasticsearch -Djna.tmpdir=/path/to/new/dir
--------------

WARNING: 如果 `mlockall` 试图分配比可用内存还多的内存会导致 JVM 或 shell 会话 退出!
--

[float]
[[settings]]
=== Elasticsearch设置

*elasticsearch* 的配置文件都在 `ES_HOME/config` 文件夹下. 该文件夹包含两个文件, 用于配置 Elasticsearch 不同
<<modules,模块>> 的 `elasticsearch.yml` , 以及用于配置 Elasticsearch 日志的 `logging.yml`.

配置文件的格式是 http://www.yaml.org/[YAML]. 下面是改变所有基于网络的模块用来绑定和发布的地址的一个示例:

[source,yaml]
--------------------------------------------------
network :
    host : 10.0.0.4
--------------------------------------------------


[float]
[[paths]]
==== 路径

在生产应用中, 你肯定想要改变数据和日志文件的路径:

[source,yaml]
--------------------------------------------------
path:
  logs: /var/log/elasticsearch
  data: /var/data/elasticsearch
--------------------------------------------------

[float]
[[cluster-name]]
==== 集群名称

另外, 不要忘了给你的生产环境集群指定一个用来发现并加入其它节点的名称:

[source,yaml]
--------------------------------------------------
cluster:
  name: <NAME OF YOUR CLUSTER>
--------------------------------------------------

请确保没有在不同的环境中复用相同的集群名称, 否则你可能会以节点加入到错误的集群而告终.
例如你可以使用 `logging-dev`, `logging-stage` 和 `logging-prod` 分别代表开发, 预发布以及生产环境集群.

[float]
[[node-name]]
==== 节点名称

您可能还想将每个节点的默认名称修改成显示的主机名. 当你启动节点的时候, Elasticsearch 默认会从近3000个名称列表中
随机地选取一个 Marvel 字符串名称.

[source,yaml]
--------------------------------------------------
node:
  name: <NAME OF YOUR NODE>
--------------------------------------------------

`HOSTNAME` 环境变量提供了机器的主机名. 如果在你机器的集群中仅运行单个 elasticsearch 节点, 你可以使用 `${...}` 符号
将节点名称设置成主机名:

[source,yaml]
--------------------------------------------------
node:
  name: ${HOSTNAME}
--------------------------------------------------

在 Elasticsearch 内部, 所有设置都调整为带命名空间的设置. 例如, 上面的设置会调整为 `node.name`.
这意味着它可以很容易的支持其它的配置格式, 如 http://www.json.org[JSON]. 如果 JSON 是首选的配置格式, 可以简单地将 `elasticsearch.yml` 文件重命名为 `elasticsearch.json`
并加上:

[float]
[[styles]]
==== 配置风格

[source,yaml]
--------------------------------------------------
{
    "network" : {
        "host" : "10.0.0.4"
    }
}
--------------------------------------------------

它也意味着很容易使用 `ES_JAVA_OPTS` 选项或作为 `elasticsearch` 命令的参数来提供外部的设置, 例如:

[source,sh]
--------------------------------------------------
$ elasticsearch -Des.network.host=10.0.0.4
--------------------------------------------------

另一个选项是设置 `es.default.` 前缀而不是 `es.` 前缀, 它意味着仅当没有在配置文件中显示地设置时才使用默认设置.

另一个选项是在配置文件中使用 `${...}` 符号, 这样会将其解析成一个环境变量设置, 例如:

[source,js]
--------------------------------------------------
{
    "network" : {
        "host" : "${ES_NET_HOST}"
    }
}
--------------------------------------------------

另外, 对于你不希望存储在配置文件中的设置, 你可以使用值 `${prompt.text}` 或 `${prompt.secret}` 并在前台启动
Elasticsearch. `${prompt.secret}` 禁用了 echoing, 所以输入的值不会在终端中显示; `${prompt.text}` 允许你看到你在
它里面输入的值. 例如:

[source,yaml]
--------------------------------------------------
node:
  name: ${prompt.text}
--------------------------------------------------

执行这个 `elasticsearch` 命令之后, 系统将提示你输入实际的值, 像下面这样:

[source,sh]
--------------------------------------------------
Enter value for [node.name]:
--------------------------------------------------

NOTE: 如果在设置中使用了 `${prompt.text}` 或 `${prompt.secret}` Elasticsearch 将不会启动, 并且进程会作为系统服务或在后台运行.

[float]
[[configuration-index-settings]]
=== 索引设置

集群中创建的索引可以提供自己的设置. 例如, 下面创建了一个基于内存存储而不是默认文件系统存储的索引 (格式可以是 YAML 或 JSON):

[source,sh]
--------------------------------------------------
$ curl -XPUT http://localhost:9200/kimchy/ -d \
'
index:
    refresh_interval: 5s
'
--------------------------------------------------

Index级别设置也可以设置在节点级别上, 例如在 `elasticsearch.yml` 文件中, 可以设置如下:

[source,yaml]
--------------------------------------------------
index :
    refresh_interval: 5s
--------------------------------------------------

这意味着在指定使用提到的配置启动的节点上创建的每个索引都存储在内存中*除非索引显示地设置它*. 换句话说, 任何索引级别的设置会覆盖节点配置中的设置. 上面的也可以设置成一个 "collapsed" 设置, 例如:

[source,sh]
--------------------------------------------------
$ elasticsearch -Des.index.refresh_interval=5s
--------------------------------------------------

所有索引级别的配置都可以在每个 <<index-modules,索引模块>> 中找到.

[float]
[[logging]]
=== 日志

Elasticsearch 使用了一个内部的日志抽象以及开箱即用的 http://logging.apache.org/log4j/1.2/[log4j]. 它通过使用 http://www.yaml.org/[YAML] 来配置它以简化 log4j 的配置,
这个日志配置文件就是 `config/logging.yml`. 它也支持 http://en.wikipedia.org/wiki/JSON[JSON] 和 http://en.wikipedia.org/wiki/.properties[properties] 格式.
可以加载多个配置文件, 在这种情况下它们会被合并, 只要它们以 `logging.` 前缀开始并以一种支持的后缀 (`.yml`, `.yaml`, `.json` 或 `.properties`)作为结束.
记录器部分包括Java包以及它们对应的日志级别, 在这部分可以省略 `org.elasticsearch` 前缀. appender 部分包括日志的输出地. 如何自定义日志记录以及所有支持的appender等相关详细信息
可以参见 http://logging.apache.org/log4j/1.2/manual.html[log4j 文档].

还有由 http://logging.apache.org/log4j/extras/[log4j-extras] 提供的另外的开箱即用的 Appenders 以及 其它日志类.

[float]
[[deprecation-logging]]
==== 弃用日志

除了常规日志外, Elasticsearch 还允许你对不建议使用的操作启用日志. 例如你想要在未来迁移某种功能，弃用日志可以让你早做决定. 弃用日志默认是禁用的, 你可以通过在 `config/logging.yml`
文件中设置启用日志级别为 `DEBUG` 来启用它.

[source,yaml]
--------------------------------------------------
deprecation: DEBUG, deprecation_log_file
--------------------------------------------------

它将在你的日志目录中创建一个每天滚动的弃用日志文件.
定期检查这个文件, 特别是你打算升级到一个新的主版本.
