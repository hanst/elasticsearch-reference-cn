[[testing-framework]]
== Java 测试框架

[[testing-intro]]

测试是应用程序中关键的一环， 特别是对elasticsearch属于信息检索这样的一个本身就很复杂的领域，
就更不应该在搭建测试基础设施上增加复杂性了。这就是我们在发布版本中添加一个额外的文件，让你可以使用和elasticsearch核心模块同意的测试框架的一个主要原因。 这个测试框架让你可以搭建一个多节点的集群，从而可以检查代码是否覆盖了集群环境运行情况下得各种情况。这个框架不需要你写很复杂的代码来启动，停止或者管理集群中的一些测试节点。更进一步，发布版本中还包含一个重要功能，叫做随机测试，因为这是elasticsearch基础设施的一部分，因此你可以免费使用。


[[why-randomized-testing]]
=== 为什么需要随机测试？

随机测试的核心概念是不在每个测试用例中使用相同的输入值，但在错误发生时依然可以重现问题。这样举可以使用各种不同的输入变量来进行测试，从而确保你的实现与你提供的测试数据是独立的。
所有测试都使用一个自定义junit runner， 叫做 `RandomizedRunner`， 该runner由随机测试项目提供。 如果你对实现细节感兴趣， 请参考 http://labs.carrotsearch.com/randomizedtesting.html[随机测试网页].

[[using-elasticsearch-test-classes]]
=== 使用 elasticsearch 测试类

首先，你需要在添加elasticsearch依赖包的同时添加测试框架的依赖包到项目中。 如果你使用maven来管理项目，那么 pom.xml 文件看上去就像下面这样
[[source,xml]]

--------------------------------------------------
<dependencies>
  <dependency>
    <groupId>org.apache.lucene</groupId>
    <artifactId>lucene-test-framework</artifactId>
    <version>${lucene.version}</version>
    <scope>test</scope>
  </dependency>
  <dependency>
    <groupId>org.elasticsearch</groupId>
    <artifactId>elasticsearch</artifactId>
    <version>${elasticsearch.version}</version>
    <scope>test</scope>
    <type>test-jar</type>
  </dependency>
</dependencies>
--------------------------------------------------

将 elasticsearch 版本和 lucene 版本替换成你的 elasticsearch 版本和其对应的 lucene 版本。
你可以在你自己的测试类中继承我们提供的部分类，这些父类提供了以下功能：

* 预定义的 loggers
* 随机测试基础框架
* 一些帮助方法


[[unit-tests]]
=== 单元测试

如果你的单元测试用例隔离性很好，不需要运行在elasticsearch集群之上， 你可以使用 `ESTestCase`。 如果你需要测试 lucene 的功能， 使用 `ESTestCase`， 如果你需要测试具体的 token streams, 请使用 `ESTokenStreamTestCase` 这个类。 还有一些特别的测试类用来执行额外的检查以确保在单元测试运行后没用资源泄露。
[[integration-tests]]
=== 整合测试

这类测试在运行之前，需要启动整个集群。 相对单元测试来说，整合测试显然更耗时，但是测试框架只在显式配置了每个用例需要重启集群时才会重启整个集群，通过这种方法来尽量减少耗时。
你的类需要继承的是 `ESIntegTestCase`。通过继承这个类， 你再也不用在测试用例中手动启动集群节点，然而你需要确保至少部分节点已经启动了。整合测试的行为可以通过配置不同的系统变量来定制。 更多信息参见 `TESTING.asciidoc` 文档 https://github.com/elastic/elasticsearch/blob/master/TESTING.asciidoc[source repository]。

[[number-of-shards]]
==== 分片数

除非在创建索引时通过索引设置改写分片数，整合测试中索引创建时的分片数是1 ~ 10 之间的随机数。
基本原则是除非特别需要，一般情况下不要设置分片数，这样每个测试用例将使用不同的分片数。 另外，你可以重写 `numberOfShards()` 方法和 `numberOfReplicas()`方法。

[[helper-methods]]
==== 常用 helper 方法

`ESIntegTestCase` 类中有一些帮助方法，使用这些方法可以是你的整合测试用例更简短和具体。
[horizontal]
`refresh()`::           更新集群中所有的索引
`ensureGreen()`::       在等待重新分配分片分布时， 确保集群状态变绿， 等待时间默认是30秒
`ensureYellow()`::      确保集群状态变为黄色， 默认等待时间也是 30 秒
`createIndex(name)`::   用给定的名称创建一个索引
`flush()`::             刷新集群中得所有索引
`flushAndRefresh()`::   组合 `flush()`和 `refresh()` 两个调用到一起。
`optimize()`::          等待所有的重新分片并且优化集群中的所有索引到一个索引段
`indexExists(name)`::   检查索引名称是否存在
`admin()`::             针对某些管理任务，返回一个 `AdminClient` 对象
`clusterService()`::    返回集群服务这个 java 对象
`cluster()`::           返回测试集群类，这个概念将在下一节讲解


[[test-cluster-methods]]
==== 测试集群方法

在随机测试中， `InternalTestCluster` 类是核心， 它可以让你配置一个特定的设置，或者重放某些错误异常，来查看你的自定义代码如何响应

[horizontal]
`ensureAtLeastNumNodes(n)`::        至少需要集群中指定个节点已经正常启动
`ensureAtMostNumNodes(n)`::         最多需要集群中指定数量的节点已经启动
`getInstance()`::                   从随机节点中获取一个 guice 实现实例
`getInstanceFromNode()`::           从指定节点中获取guice实现实例
`stopRandomNode()`::                停止一个随机节点，来模拟集群中出现的一个问题
`stopCurrentMasterNode()`::         停止当前的主节点，从而强制产生新的主节点选举流程
`stopRandomNonMaster()`::           停止一个非主节点的节点，来模拟错误
`buildNode()`::                     新建一个 elasticsearch 节点
`startNode(settings)`::             新建并启动一个 elasticsearch 节点


[[changing-node-settings]]
==== 更改节点配置

如果你需要特别设置节点的某些配置，这也是 `EsIntegTestCase` 所支持的，你只要重写 `nodeSettings()` 方法就可以了。
[source,java]
-----------------------------------------
public class Mytests extends ESIntegTestCase {

  @Override
  protected Settings nodeSettings(int nodeOrdinal) {
      return settingsBuilder().put(super.nodeSettings(nodeOrdinal))
             .put("node.mode", "network")
             .build();
  }

}
-----------------------------------------


[[accessing-clients]]
==== 操作客户端

为了执行某些操作，你需要使用一个客户端。你可以通过 `ESIntegTestCase.client()` 来随机返回一个客户端。 这个客户端是 `ThansportClient` 或 `NodeClient` 中的一个，通常在执行操作的时候，你不会在意具体是哪种类型的客户端。关于客户端的选择， `InternalTestCluster` 这个类里有更多的选择， 你可以通过 `ESIntegTestCase.InternalTestCluster` 这个方法来获得该类。
[horizontal]
`iterator()`::                  返回所有可用的客户端的迭代器
`masterClient()`::              返回一个连接到主节点的客户端
`nonMasterClient()`::           返回一个连接到非主节点的客户端
`clientNodeClient()`::          返回一个连接到客户端节点的客户端
`client(String nodeName)`::     返回一个连接到指定节点的客户端
`smartClient()`::               返回一个智能客户端


[[scoping]]
==== 范围

默认情况下，一个集群只会分配给一个测试套件中的单元测试来运行， 并且所有的索引和模板都会在每个单元测试完成后被删除。但是，假如你再测试时希望加载某个插件，你希望每个单元测试启动一个新集群，但不希望每次都加载这个插件。
这个时候，你就可以在类级别上使用 `@ClusterScope` 注解来配置这种行为。

[source,java]
-----------------------------------------
@ClusterScope(scope=TEST, numNodes=1)
public class CustomSuggesterSearchTests extends ESIntegTestCase {
  // ... tests go here
}
-----------------------------------------

以上的例子会在每个测试方法时启动一个新集群。 默认的范围是 `SUITE` （该测试类中得所有方法使用一个集群）。 参数 `numNodes` 的设置让你可以控制节点个数，这样可以加速测试执行过程，这是因为一个新节点的启动是一个耗时的操作，并且这个测试中并不一定会需要它。

[[changing-node-configuration]]
==== 通过配置更改插件

由于elasticsearch使用了 JUnit 4， 因此用 `@Before` 和 `@After` 并没有什么问题。但是你需要记住一个事情，那就是这对你的集群建立并没有任何影响， 因为集群在方法运行时早已经启动并且运行了。因此当你希望在节点运行之前设置一些节点的配置---比如节点启动时加载一个插件， 你应该重写类 `ElasticsearchIntegrationTest` 的方法 `nodeSettings()`，并将集群的范围改为 `SUITE`。
[source,java]
-----------------------------------------
@Override
protected Settings nodeSettings(int nodeOrdinal) {
  return Settings.settingsBuilder()
           .put("plugin.types", CustomSuggesterPlugin.class.getName())
           .put(super.nodeSettings(nodeOrdinal)).build();
}
-----------------------------------------

[[randomized-testing]]
=== 随机测试

目前为止，你看到的代码片段并没有体现出随机测试的任何特性，那是因为这些细节被小心的被隐藏在底层了。然而，在你写自己的测试用例时，你也应该使用这些特性。在开始之前，你需要知道，如何重现一个失败的测试用例，它是如何失败的。幸运的是，这特别简单，因为整个mvn调用信息和失败的测试用例一起被记录了下来，这样你就可以简单的复制粘贴那一行，并重新执行该测试就好了。

[[generating-random-data]]
==== 随机数据生成

接下来就是将你的测试用例从使用静态测试数据转变为使用随机测试数据。 你需要随机化的数据随着你的测试功能的不同可能有比较大的差异。看下面的例子（注意，下面的列表中得内容可能会改变，因为分布式系统经常会有很多很多的变化）：

* 搜索那些包含任意UTF8字符的数据
* 在每个用例中改变映射配置，索引和字段名称
* 在每个用例中改变你的请求返回的数据量或者改变配置的最大限制记录数
* 在创建索引时改变主分片或从分片的大小

那么，如何生成随机数据呢。你需要知道的最重要的一点是， 你不应该自己实例化 `Random` 实例，而应该使用 `RandomizedTest` 所提供的实例， 所有elasticsearch测试类都是从这个类继承而来的。
[horizontal]
`getRandom()`::         返回一个random的实例，这个实例也可以通过传入特别的参数来重新创建一个新的。
`randomBoolean()`::     返回一个随机 boolean 对象
`randomByte()`::        返回一个随机 byte 对象
`randomShort()`::       返回一个随机 short 对象
`randomInt()`::         返回一个随机 integer 对象
`randomLong()`::        返回一个随机 long 对象
`randomFloat()`::       返回一个随机 float 对象
`randomDouble()`::      返回一个随机 double 对象

`randomInt(max)`::      返回一个0到 max 之间的随机 integer 对象
`between()`::           返回一个指定范围内的随机值
`atLeast()`::           返回一个不小于某个数的随机 integer 对象
`atMost()`::            返回一个不超过某个数的随机 integer 对象

`randomLocale()`::      返回一个随机 locale 对象
`randomTimeZone()`::    返回一个随机 timezone 对象

`randomFrom()`::        从一个 list/array 中随机返回一个元素

另外，在这个随机测试类中，还包含一些帮助方法，可以用它们生成随机 ASCII 和 Unicode 字符串， 见方法名以 `randomAscii`, `randomUnicode`, 和 `randomRealisticUnicode` 开头的那些方法。
如果你在调试一个特别的问题时，需要用到一个特别的随机种子， 可以使用 `@Seed` 这个注解来达到在测试用例中配置一个特定种子的目的。 如果你希望运行一个测试用例多次，不需要一次又一次的重启该测试套件，你可以直接使用 `@Repeat` 注解就可以了，该注解可以设置重复任意次数， 每次迭代使用一个不同的随机种子。

[[assertions]]
=== 断言

As many elasticsearch tests are checking for a similar output, like the amount of hits or the first hit or special highlighting, a couple of predefined assertions have been created. Those have been put into the `ElasticsearchAssertions` class. There is also a specific geo assertions in `ElasticsearchGeoAssertions`.
由于在 elasticsearch 中经常需要检查一些相似的输出，比如匹配到的文档数量，第一个匹配文档，或者是特殊高亮片段，因此预置了一些断言。 这些断言被放在 `ElasticsearchAssertions` 类中。 同时， 特别针对 geo 相关处理的断言也可以在 `ElasticsearchGeoAssertions` 中找到。
[horizontal]
`assertHitCount()`::        检查搜索或者 count 请求匹配到的文档数量
`assertAcked()`::           确保一个请求被主节点接受了
`assertSearchHits()`::      断言一个请求返回中包含特定的id列表
`assertMatchCount()`::      对于percolation请求，断言匹配数
`assertFirstHit()`::        断言第一个文档，命中了特定的匹配规则
`assertSecondHit()`::       断言第二个文档，命中了特定的匹配规则
`assertThirdHit()`::        断言第三个文档，命中了特定的匹配规则
`assertSearchHit()`::       断言返回中指定文档，命中了特定的匹配规则
`assertNoFailures()`::      断言在返回中不包含分片失败的信息
`assertFailures()`::        断言在返回中包含有分片失败的信息
`assertHighlight()`::       断言有指定的高亮片段被匹配到
`assertSuggestion()`::      断言包含指定的搜索建议
`assertSuggestionSize()`::  断言包含指定的搜索建议数
`assertThrows()`::          断言某个特定的异常被抛出

通用匹配器

[horizontal]
`hasId()`::     检查匹配到的文档id的匹配器
`hasType()`::   检查匹配到的文档类型的匹配器
`hasIndex()`::  检查匹配到的文档所属索引的匹配器
`hasScore()`::  检查匹配到的文档得分的匹配器
`hasStatus()`:: 检查返回中是否包含特定 `RestStatus` 的匹配器

通常， 你需要像下面这样组合使用断言和匹配器
[source,java]
----------------------------
SearchResponse seearchResponse = client().prepareSearch() ...;
assertHitCount(searchResponse, 4);
assertFirstHit(searchResponse, hasId("4"));
assertSearchHits(searchResponse, "1", "2", "3", "4");
----------------------------
